@page "/article/{id}"

@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager navigationManager

@using HtmlAgilityPack
@using Microsoft.AspNetCore.Components.Web.Extensions.Head

@if (article == null)
{
    <div class="card article">
        <div class="card-body">
            <div style="height:52px;" class="d-flex">
                <div class="mr-auto"><h3 class="card-title-preview" /></div>
                <div><div class="loading"><span>Loading... </span><img src="/hourglass.gif" alt="loading" /></div></div>
            </div>
            <div>
                <h4 class="card-subtitle-preview mb-2 text-muted"></h4>
            </div>

            <div id="content" style="width:100%;height:400px;background-color:lightgray;margin:20px 0px;">
            </div>

            <div>
                <Tag Name="" ShowNoData="true" />
                <Tag Name="" ShowNoData="true" />
                <Tag Name="" ShowNoData="true" />
            </div>
        </div>
    </div>
}
else
{
    <Title Value='@($"{Configuration.BlogConfiguration.BlogTitle} - {article.Title}")' />
    <Meta property="og:url"                     content="@navigationManager.Uri" />
    <Meta property="og:type"                    content="article" />
    <Meta property="og:article:published_time"  content="@article.Date" />
    <Meta property="og:title"                   content="@article.Title" />
    <Meta property="og:description"             content="@metaDataDescription" />
    @foreach(var tag in tags)
    {
        <Meta property="og:article:tag"  content="@(tag.Name)" />
    }    
    @foreach(var image in articleImages)
    {
        <Meta property="og:image" content="@image" />
    }

    <Meta name="title"                content="@article.Title" />
    <Meta name="description"          content="@metaDataDescription" />
    <Meta name="keywords"             content="@metaDataTags"/>

    <div class="card article">
        <div class="card-body">
            <div style="height:52px;">
                <h3 class="card-title" style="float:left;">@article.Title</h3>
                @if (isAdmin)
                {
                    <NavLink href="@($"/edit/{article.Id}")" style="float: right;">
                        <button type="button" class="btn btn-primary">Edit</button>
                    </NavLink>
                }
            </div>

            <div>
                <h4 class="card-subtitle mb-2 text-muted">@article.Date.ToShortDateString() @article.Subtitle</h4>
            </div>

            <div id="content">
                @(new MarkupString(article.Content))
            </div>

            <div>
                @if (tags != null)
                {
                    @foreach (var tag in tags)
                    {
                        <Tag Name="@tag.Name" />
                    }
                }
            </div>
        </div>
    </div>

    <NtFreX.Blog.Client.Components.Share Title="@(article.Title)" Description="@(article.Subtitle)" />

    <div class="comments">
        <div class="card">
            <div class="card-body">
                <h5 style="margin:4px;" class="card-title">Add Comment</h5>
                <div style="margin: 4px;"><span style="width: 20%; display: block; float: left;">Title</span><input style="width: 80%;" @bind="newComment.Title" /></div>
                <div style="margin: 4px;"><span style="width: 20%; display: block; float: left;">User</span><input style="width: 80%;" @bind="newComment.User" /></div>
                <div style="margin: 4px;"><textarea style="width: 100%;" rows="3" @bind="newComment.Content"></textarea></div>
                <NtFreX.Blog.Client.Components.Recaptcha @bind-CaptchaResponse="captchaResponse" />
                <button type="button" class="btn btn-primary" style="float:right; margin:4px;" @onclick="@InsertCommentAsync" disabled="@(string.IsNullOrEmpty(captchaResponse))">Save</button>
            </div>
        </div>

        @foreach (var comment in comments)
        {
            <div class="card comment">
                <div class="card-body">
                    <h5 class="card-title">@comment.Title</h5>
                    <h6 class="card-subtitle mb-2 text-muted">@comment.Date.ToShortDateString() @comment.Date.ToShortTimeString() @comment.User</h6>
                    <p>@comment.Content</p>
                </div>
            </div>
        }
    </div>

    <div class="card">
        <div class="card-body">
            <h5 class="card-title">Popular articles from this blog</h5>

            @foreach (var topArticle in topArticles)
            {
                <ArticlePreview Article="@topArticle.Article" Tags="@allTags" IsAdmin="@isAdmin" Visits="@topArticle.VisitorCount" />
            }
        </div>
    </div>
}

@code {
    private ArticleDto article;
    private IReadOnlyList<ArticleWithVisitsDto> topArticles;
    private CommentDto[] comments;
    private TagDto[] tags;
    private TagDto[] allTags;
    private CreateCommentDto newComment = new CreateCommentDto();
    private bool isAdmin;
    private string captchaResponse;
    private string[] articleImages;
    private string metaDataTags;
    private string metaDataDescription;

    private const int MaxDescriptionLength = 400;

    [Parameter] public string Id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await LoadDataAsync();
    }

    private string NormalizeImagePath(string imagePath)
    {
        if (imagePath.StartsWith("http://") || imagePath.StartsWith("https://"))
            return imagePath;

        var baseUri = navigationManager.BaseUri.EndsWith("/") ? navigationManager.BaseUri.Substring(0, navigationManager.BaseUri.Length - 1) : navigationManager.BaseUri;
        var normalizedImagePath = imagePath.StartsWith("/") ? imagePath : $"/{imagePath}";
        return normalizedImagePath;
    }

    private string[] GetImages() 
    {
        if (article == null)
            return Array.Empty<string>();

        var doc = new HtmlDocument();
        doc.LoadHtml(article.Content);

        var imageNodes = doc.DocumentNode.SelectNodes("//img");
        if (imageNodes == null || !imageNodes.Any())
            return Array.Empty<string>();

        return imageNodes
            .Select(x => x.GetAttributeValue("src", string.Empty))
            .Where(x => !string.IsNullOrEmpty(x))
            .Select(x => NormalizeImagePath(x))
            .ToArray();
    } 

    private string GetMetaDataDescription() 
    {
        var doc = new HtmlDocument();
        doc.LoadHtml(article.Content);

        var description = article.Subtitle + Environment.NewLine + doc.DocumentNode.InnerText;
        var cutDescription = description.Substring(0, Math.Min(description.Length, MaxDescriptionLength));
        return cutDescription.Length == description.Length ? cutDescription : $"{cutDescription}...";
    }

    private async Task LoadDataAsync()
    {
        try
        {
            await Task.WhenAll(new Task[] {
                new Func<Task>(async () => topArticles = await Http.GetFromJsonAsync<IReadOnlyList<ArticleWithVisitsDto>>($"/api/article/topTreeWithVisitorCount/{Id}")).Invoke(),
                new Func<Task>(async () => article = await Http.GetFromJsonAsync<ArticleDto>($"/api/article/{Id}")).Invoke(),
                new Func<Task>(async () => comments = await Http.GetFromJsonAsync<CommentDto[]>($"/api/comment/byArticleId/{Id}")).Invoke(),
                new Func<Task>(async () => tags = await Http.GetFromJsonAsync<TagDto[]>($"/api/tag/byArticleId/{Id}")).Invoke(),
                new Func<Task>(async () => allTags = await Http.GetFromJsonAsync<TagDto[]>("/api/tag")).Invoke(),
                new Func<Task>(async () => isAdmin = bool.Parse(await Http.GetStringAsync("/api/authorization/isAdmin"))).Invoke(),
                new Func<Task>(async () => await Http.GetAsync($"/api/article/visit/{Id}")).Invoke(),
                new Func<Task>(async () => await Task.Delay(TimeSpan.FromMilliseconds(Configuration.BlogConfiguration.MinPageLoadTimeInMs))).Invoke(),
            });

            articleImages = GetImages();
            metaDataTags = string.Join(", ", tags.Select(x => x.Name));
            metaDataDescription = GetMetaDataDescription();
        }
        catch
        {
            await JSRuntime.InvokeVoidAsync("navigate", new[] { "/NotFound" });
        }
    }

    private async Task InsertCommentAsync()
    {
        if (string.IsNullOrEmpty(newComment.Content) && string.IsNullOrEmpty(newComment.Title))
            return;

        newComment.ArticleId = Id;
        newComment.CaptchaResponse = captchaResponse;
        await Http.PostAsJsonAsync("/api/comment", newComment);
        newComment = new CreateCommentDto();

        await JSRuntime.InvokeVoidAsync("googleRecaptchaReset");
        await LoadDataAsync();
    }
} 