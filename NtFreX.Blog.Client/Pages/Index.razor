@page "/"
@page "/{tag}"

@using Microsoft.AspNetCore.Components.Web.Extensions.Head
@using System.Text;

@inject HttpClient Http
@inject NavigationManager navigationManager

<Title Value="@(Title)" />
@if (!string.IsNullOrEmpty(Tag))
{
    <Meta name="description" content=@($"Articles tagged with '{WebHelper.Base64UrlDecode(Tag, Encoding.UTF8)}'.") />
}

@if (isAdmin)
{
    <button type="button" class="btn btn-primary" style="position:absolute;right:60px;top:50px;" @onclick="@CreateArticleAsync">Create</button>
}

<div class="top-row d-flex">
    <div class="mr-auto">
        <h2>@Configuration.BlogConfiguration.BlogTitle</h2>
        <span>@Configuration.BlogConfiguration.BlogSubtitle</span>

        @if (!string.IsNullOrEmpty(Tag))
        {
            <h6 style="margin-top: 8px; font-style: italic; color: gray;">Displaying articles with the label '@(WebHelper.Base64UrlDecode(Tag, Encoding.UTF8))'</h6>
            <NavLink href="" Match="NavLinkMatch.All">
                <span>Clear filter</span>
            </NavLink>
        }
    </div>

    @if (articles == null)
    {
        <div class="loading"><span>Loading... </span><img src="/hourglass.gif" alt="loading" /></div>
    }
</div>

@if (articles == null)
{
    <ArticlePreview ShowNoData="true" />
    <ArticlePreview ShowNoData="true" />
    <ArticlePreview ShowNoData="true" />
    <ArticlePreview ShowNoData="true" />
    <ArticlePreview ShowNoData="true" />
}
else
{
    @foreach (var article in articles)
    {
        <ArticlePreview Article="@article.Article" Tags="@tags" IsAdmin="@isAdmin" Visits="@article.VisitorCount" />
    }
}
@code {
    private IReadOnlyList<ArticleWithVisitsDto> articles;
    private TagDto[] tags;
    private bool isAdmin;

    public string Title => Configuration.BlogConfiguration.BlogTitle + (!string.IsNullOrEmpty(Tag) ? $" - Articles tagged with '{WebHelper.Base64UrlDecode(Tag, Encoding.UTF8)}'" : string.Empty);
    [Parameter] public string Tag { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        articles = null;

        await Task.WhenAll(new Task[] {
            new Func<Task>(async () => isAdmin = bool.Parse(await Http.GetStringAsync("/api/authorization/isAdmin"))).Invoke(),
            new Func<Task>(async () =>
                articles = string.IsNullOrEmpty(Tag)
                    ? await Http.GetFromJsonAsync<IReadOnlyList<ArticleWithVisitsDto>>("/api/article/withVisitorCount")
                    : await Http.GetFromJsonAsync<IReadOnlyList<ArticleWithVisitsDto>>($"/api/article/byTagWithVisitorCount/{Tag}")).Invoke(),
            new Func<Task>(async () => tags = await Http.GetFromJsonAsync<TagDto[]>("/api/tag")).Invoke(),
            new Func<Task>(async () => await Task.Delay(TimeSpan.FromMilliseconds(Configuration.BlogConfiguration.MinPageLoadTimeInMs))).Invoke(),
    });
    }

    public async Task CreateArticleAsync()
    {
        var id = await Http.PostAsync("/api/article", null);
        navigationManager.NavigateTo($"/edit/{await id.Content.ReadAsStringAsync()}");
    }
}
