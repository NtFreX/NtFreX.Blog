@page "/twofactorlogin"

@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager navigationManager

@using NtFreX.Blog.Client
@using Microsoft.AspNetCore.Components.Web.Extensions.Head

<Title Value='@($"{Configuration.BlogConfiguration.BlogTitle} - 2FA Login")' />
<Meta name="robots" content="noindex" />

<input @bind-value="secondFactor" type="text" />
<NtFreX.Blog.Client.Components.Recaptcha @bind-CaptchaResponse="captchaResponse" />
<button @onclick="@LoginAsync" disabled="@(string.IsNullOrEmpty(captchaResponse))">Login</button>



@code {
    private string secondFactor;
    private string username;
    private string captchaResponse;

    protected override async Task OnParametersSetAsync() 
    {
        username = await localStorage.GetItemAsStringAsync(Program.TwoFactorUserTokenName);
        await localStorage.RemoveItemAsync(Program.TwoFactorUserTokenName);
    }

    private async Task LoginAsync()
    {
        var session = await localStorage.GetItemAsStringAsync(JwtTokenHttpHandler.SessionStorageKey);

        var response = await Http.PostAsJsonAsync($"/api/login", new LoginCredentialsDto { Key = username, Secret = secondFactor, Session = session, Type = LoginCredentialsType.TwoFactor, CaptchaResponse = captchaResponse });
        await JSRuntime.InvokeVoidAsync("googleRecaptchaReset");

        if (!response.IsSuccessStatusCode)
            return;

        var responseModel = await response.Content.ReadFromJsonAsync<LoginResponseDto>();
        if (!responseModel.Success)
            return;
            
        await localStorage.SetItemAsStringAsync(JwtTokenHttpHandler.SessionStorageKey, responseModel.Value);
        navigationManager.NavigateTo("/");
    }
} 