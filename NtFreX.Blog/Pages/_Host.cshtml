@page "/"
@namespace NtFreX.Blog.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <environment include="Production">
        @if (!string.IsNullOrEmpty(Configuration.BlogConfiguration.GoogleTagMeasurementId))
        {
            <!-- Global site tag (gtag.js) - Google Analytics -->
            <script async src="https://www.googletagmanager.com/gtag/js?id=@Configuration.BlogConfiguration.GoogleTagMeasurementId"></script>
            <script>
                window.dataLayer = window.dataLayer || [];
                function gtag() { dataLayer.push(arguments); }
                gtag('js', new Date());

                gtag('config', '@Configuration.BlogConfiguration.GoogleTagMeasurementId');
            </script>
        }
        @if (!string.IsNullOrEmpty(Configuration.BlogConfiguration.GoogleSiteVerification))
        {
            <meta name="google-site-verification" content="@Configuration.BlogConfiguration.GoogleSiteVerification" />
        }

        @if (!string.IsNullOrEmpty(Configuration.BlogConfiguration.CloudflareToken))
        {
            <script defer src='https://static.cloudflareinsights.com/beacon.min.js' data-cf-beacon='{"token": "@Configuration.BlogConfiguration.CloudflareToken"}'></script>
        }

    </environment>

    @if (!string.IsNullOrEmpty(Configuration.BlogConfiguration.ReCaptchaSiteKey))
    {
        <script src="https://www.google.com/recaptcha/api.js" async defer></script>
        <script>
            function googleRecaptcha(dotNetObject, selector, sitekeyValue, callback, expiredCallback) {
                return grecaptcha.render(selector, {
                    'sitekey': sitekeyValue,
                    'callback': (response) => {
                        if (callback) {
                            dotNetObject.invokeMethodAsync(callback, response);
                        }
                    },
                    'expired-callback': () => {
                        if (expiredCallback) {
                            dotNetObject.invokeMethodAsync(expiredCallback);
                        }
                    }
                });
            };

            function googleRecaptchaGetResponse(response) {
                return grecaptcha.getResponse(response);
            }

            function googleRecaptchaReset() {
                grecaptcha.reset();
            }
        </script>
    }

    <script>
        function navigate(path) {
            window.location.pathname = path;
        }
    </script>

    <title>@Configuration.BlogConfiguration.BlogTitle</title>
    <meta charset="utf-8" />
    <meta name="description" content="@Configuration.BlogConfiguration.BlogDescription" />
    
    <meta property="og:type"          content="website" />
    <meta property="og:title"         content="@Configuration.BlogConfiguration.BlogTitle" />
    <meta property="og:description"   content="@Configuration.BlogConfiguration.BlogDescription" />
    <meta property="og:image"         content="/icon-512.png" />

    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="theme-color" content="#F9F9F9" />
    <meta http-equiv="Content-Security-Policy" content="
          script-src    * 'unsafe-inline' 'unsafe-eval';
          style-src     * data: blob: 'unsafe-inline';
          img-src       * data: blob: 'unsafe-inline';
          font-src      * data: blob: 'unsafe-inline';
          connect-src   * data: blob: 'unsafe-inline';
          " />
    <base href="~/" />
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    <link rel="stylesheet" href="css/site.css" />
    <link href="manifest.json" rel="manifest" />
    <link rel="apple-touch-icon" sizes="512x512" href="icon-512.png" />

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://www.gstatic.com">
    <link rel="preconnect" href="https://pagead2.googlesyndication.com">
</head>
<body>
    <div id="app">
        <div class="loading d-flex align-items-center justify-content-center" style="width:100%;margin:30px;"><span>Loading... </span><img src="/hourglass.gif" alt="loading" /></div>
    </div>

    <div id="blazor-error-ui">
        An unhandled error has occurred.
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

    <environment exclude="Production">
        <script src="_framework/blazor.webassembly.js"></script>
    </environment>
    <environment include="Production">
        <script src="_framework/blazor.webassembly.js" autostart="false"></script>
        <script type="module">
            import { BrotliDecode } from './decode.min.js';
            Blazor.start({
                loadBootResource: function (type, name, defaultUri, integrity) {
                    if (type !== 'dotnetjs') {
                        return (async function () {
                            const response = await fetch(defaultUri + '.br', { cache: 'no-cache' });
                            if (!response.ok) {
                                throw new Error(response.statusText);
                            }
                            const originalResponseBuffer = await response.arrayBuffer();
                            const originalResponseArray = new Int8Array(originalResponseBuffer);
                            const decompressedResponseArray = BrotliDecode(originalResponseArray);
                            const contentType = type ===
                                'dotnetwasm' ? 'application/wasm' : 'application/octet-stream';
                            return new Response(decompressedResponseArray,
                                { headers: { 'content-type': contentType } });
                        })();
                    }
                }
            });
        </script>
    </environment>

    @if (Configuration.BlogConfiguration.ServiceWorker)
    {
        <script>navigator.serviceWorker.register('service-worker.js');</script>
    }

    <div class="side-ad">
        <environment include="Production">
            @if (!string.IsNullOrEmpty(Configuration.BlogConfiguration.GoogleAdPublisherId) && !string.IsNullOrEmpty(Configuration.BlogConfiguration.GoogleAdSlotId))
            {
                <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=@Configuration.BlogConfiguration.GoogleAdPublisherId"
                        crossorigin="anonymous"></script>
                <ins class="adsbygoogle vertical-center"
                     style="display:block"
                     data-ad-client="@Configuration.BlogConfiguration.GoogleAdPublisherId"
                     data-ad-slot="@Configuration.BlogConfiguration.GoogleAdSlotId"
                     data-ad-format="auto"
                     data-full-width-responsive="true"></ins>
                <script>
                    (adsbygoogle = window.adsbygoogle || []).push({});
                </script>
            }
        </environment>
    </div>
</body>
</html>