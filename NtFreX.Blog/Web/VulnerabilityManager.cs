using Microsoft.AspNetCore.Http;
using System.Linq;
using System.Net;

namespace NtFreX.Blog.Web
{
    public class VulnerabilityManager
    {
        private readonly VulnerabilityFactory factory = new VulnerabilityFactory();

        // TODO: search for post requests
        // TODO: search for requests with response status code not equal 200 and log warnings for all which make sense
        private VulnerabilityManager()
        {
            factory.Create("GET", "/owa/auth/signin.aspx", HttpStatusCode.NotFound);
            factory.Create("GET", "/owa/auth/login.aspx", HttpStatusCode.NotFound);
            factory.Create("GET", "//admin/config.php", HttpStatusCode.NotFound);
            factory.Create("GET", "/SQLite/main.php", HttpStatusCode.NotFound);
            factory.Create("GET", "/SQLiteManager-1.2.4/main.php", HttpStatusCode.NotFound);
            factory.Create("GET", "/SQLiteManager/main.php", HttpStatusCode.NotFound);
            factory.Create("GET", "/admin.php", HttpStatusCode.NotFound);
            factory.Create("GET", "/admin//config.php", HttpStatusCode.NotFound);
            factory.Create("GET", "/administrator/index.php", HttpStatusCode.NotFound);
            factory.Create("GET", "/agSearch/SQlite/main.php", HttpStatusCode.NotFound);
            factory.Create("GET", "/composer.json", HttpStatusCode.NotFound);
            factory.Create("GET", "/dup-installer/main.installer.php", HttpStatusCode.NotFound);
            factory.Create("GET", "/main.php", HttpStatusCode.NotFound);
            factory.Create("GET", "/sqlite/main.php", HttpStatusCode.NotFound);
            factory.Create("GET", "/test/sqlite/SQLiteManager-1.2.0/SQLiteManager-1.2.0/main.php", HttpStatusCode.NotFound);
            factory.Create("GET", "/vtigercrm/vtigerservice.php", HttpStatusCode.NotFound);
            factory.Create("GET", "/wp-content/plugins/super-interactive-maps/sim-wp-admin/pages/import.php", HttpStatusCode.NotFound);
            factory.Create("GET", "/wp-content/plugins/superlogoshowcase-wp/sls-wp-admin/pages/import.php", HttpStatusCode.NotFound);
            factory.Create("GET", "/wp-content/plugins/superstorefinder-wp/ssf-wp-admin/pages/import.php", HttpStatusCode.NotFound);
            factory.Create("GET", "/owa/auth/logon.aspx", HttpStatusCode.NotFound);
            factory.Create("GET", "//xmlrpc.php", HttpStatusCode.NotFound);
            factory.Create("GET", "/blog/wp-login.php", HttpStatusCode.NotFound);
            factory.Create("GET", "/wordpress/wp-login.php", HttpStatusCode.NotFound);
            factory.Create("GET", "/wp-login.php", HttpStatusCode.NotFound);
            factory.Create("GET", "/wp/wp-login.php", HttpStatusCode.NotFound);
            factory.Create("GET", "//2018/wp-includes/wlwmanifest.xml", HttpStatusCode.NotFound);
            factory.Create("GET", "//2019/wp-includes/wlwmanifest.xml", HttpStatusCode.NotFound);
            factory.Create("GET", "//2020/wp-includes/wlwmanifest.xml", HttpStatusCode.NotFound);
            factory.Create("GET", "//blog/wp-includes/wlwmanifest.xml", HttpStatusCode.NotFound);
            factory.Create("GET", "//cms/wp-includes/wlwmanifest.xml", HttpStatusCode.NotFound);
            factory.Create("GET", "//media/wp-includes/wlwmanifest.xml", HttpStatusCode.NotFound);
            factory.Create("GET", "//news/wp-includes/wlwmanifest.xml", HttpStatusCode.NotFound);
            factory.Create("GET", "//shop/wp-includes/wlwmanifest.xml", HttpStatusCode.NotFound);
            factory.Create("GET", "//site/wp-includes/wlwmanifest.xml", HttpStatusCode.NotFound);
            factory.Create("GET", "//sito/wp-includes/wlwmanifest.xml", HttpStatusCode.NotFound);
            factory.Create("GET", "//test/wp-includes/wlwmanifest.xml", HttpStatusCode.NotFound);
            factory.Create("GET", "//web/wp-includes/wlwmanifest.xml", HttpStatusCode.NotFound);
            factory.Create("GET", "//website/wp-includes/wlwmanifest.xml", HttpStatusCode.NotFound);
            factory.Create("GET", "//wordpress/wp-includes/wlwmanifest.xml", HttpStatusCode.NotFound);
            factory.Create("GET", "//wp-includes/wlwmanifest.xml", HttpStatusCode.NotFound);
            factory.Create("GET", "//wp/wp-includes/wlwmanifest.xml", HttpStatusCode.NotFound);
            factory.Create("GET", "//wp1/wp-includes/wlwmanifest.xml", HttpStatusCode.NotFound);
            factory.Create("GET", "//wp2/wp-includes/wlwmanifest.xml", HttpStatusCode.NotFound);
            factory.Create("GET", "/wp-content/plugins/wp-file-manager/readme.txt", HttpStatusCode.NotFound);
            factory.Create("GET", "/.env", HttpStatusCode.NotFound);
            factory.Create("GET", "//login_sid.lua", HttpStatusCode.NotFound);
            factory.Create("GET", "/Telerik.Web.UI.WebResource.axd", HttpStatusCode.NotFound);
            factory.Create("GET", "/login", HttpStatusCode.NotFound);
            factory.Create("GET", "/asset-manifest.json", HttpStatusCode.NotFound);
            factory.Create("GET", "/cgi-bin/config.exp", HttpStatusCode.NotFound);
            factory.Create("GET", "//a2billing/customer/templates/default/footer.tpl", HttpStatusCode.NotFound);
            factory.Create("GET", "/wp-admin/setup-config.php", HttpStatusCode.NotFound);
            factory.Create("GET", "/wp-admin/install.php", HttpStatusCode.NotFound);
            factory.Create("GET", "/owa/auth/x.js", HttpStatusCode.NotFound);

            factory.Create("POST", "/Autodiscover/Autodiscover.xml", HttpStatusCode.NotFound);

            factory.Create("/index.php", HttpStatusCode.NotFound);
            factory.Create("/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php", HttpStatusCode.NotFound);

            // those requests are routed to /_Host
            factory.Create("GET", "/console/", HttpStatusCode.OK);
            factory.Create("GET", "/administrator/", HttpStatusCode.OK);
            factory.Create("GET", "/admin", HttpStatusCode.OK);
            factory.Create("GET", "/admin/", HttpStatusCode.OK);
            factory.Create("GET", "/wp-content/", HttpStatusCode.OK);

            // those requests are routed to /_Host and fail because the required antiforgery cookie is not present 
            factory.Create("POST", "/HNAP1/", HttpStatusCode.BadRequest);
            factory.Create("POST", "/api/jsonws/invoke", HttpStatusCode.BadRequest);
            factory.Create("POST", "/mifs/.;/services/LogService", HttpStatusCode.BadRequest);
        }

        private bool IsMatch(RequestSubject subject, HttpRequest request, string requestBody)
        {
            return !(subject.RequestMethod != null && subject.RequestMethod != request.Method ||
                subject.RequestPath != null && subject.RequestPath != request.Path ||
                subject.RequestScheme != null && subject.RequestScheme != request.Scheme ||
                subject.RequestBody != null && subject.RequestBody != requestBody);
        }

        public (bool IsVulnerability, bool HasFailed) CheckRequest(HttpRequest request, HttpResponse response, string requestBody)
        { 
            var match = factory.GetAll().FirstOrDefault(subject => IsMatch(subject, request, requestBody));
            return match == null
                ? (false, true)
                : (true, match.HasFailed(response));
        }

        public static VulnerabilityManager Instance { get; } = new VulnerabilityManager();
    }
}
